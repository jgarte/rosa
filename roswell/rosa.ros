#!/bin/sh
#|-*- mode:lisp -*-|#
#| Rosa command line front-end
exec ros -Q -- $0 "$@"
|#
(defpackage :rosa.command
  (:use :cl))

(ql:quickload :inquisitor :silent t)
(ql:quickload :rosa :silent t)
(ql:quickload :trivial-shell :silent t)

(in-package :rosa.command)

(defun usage ()
  (format *error-output* "Rosa - Simple markup ranguage for named text parts
usage: rosa.ros [name] [file]

DESCRIPTION
    rosa.ros get text named [name] from [file] and output stdout.
    now, rosa.ros only returned first text of all appearing.

PARAMETERS
      name: required. target name. if supplied `:all`, output all pairs name
            and text as S expression.
      file: not required. input files. if not supplied, read data from stdin.

"))

(defun pick-up (name stream)
  (cond ((eq name :|all|) (rosa:peruse-from-stream stream))
        (t (rosa:find-from-stream stream name))))

(defun print-pretty (name obj)
  (cond ((eq name :|all|) (format t "~s" obj))
        (t (format t "~a" (first obj)))))

(defun main (&rest argv)
  (declare (ignorable argv))
  (case (length argv)
    (0 (usage)
       (metashell:exit -1))
    (1 (let ((name (intern (elt argv 0) :keyword)))
         (print-pretty name (pick-up name *standard-input*))))
    (2 (let ((name (intern (elt argv 0) :keyword))
             (file (elt argv 1)))
         (with-open-file (in file
                             :direction :input
                             :external-format
                             (inq:detect-external-format (pathname file) :jp))
           (print-pretty name (pick-up name in)))))
    (t (usage)
       (metashell:exit -1))))
;;; vim: set ft=lisp lisp:
