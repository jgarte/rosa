#!/bin/sh
#|-*- mode:lisp -*-|#
#| Rosa command line front-end
exec ros -Q -- $0 "$@"
|#
(defpackage :rosa.command
  (:use :cl))

(ql:quickload :inquisitor :silent t)
(ql:quickload :rosa :silent t)
(ql:quickload :trivial-shell :silent t)

(in-package :rosa.command)


(defun print-usage ()
  (format *error-output* "Rosa - text labeling language CLI
usage: rosa list [OPTIONS] [FILE]
       rosa pick [OPTIONS] LABEL [FILE]
       rosa scan [OPTIONS] [FILE]

DESCRIPTION
    rosa extract key-value structure from input. key as 'label'
    and value as 'body'.

    if not supplied `file`, rosa reads from standard input.

COMMANDS
    rosa list [FILE]
        list all labels from input. by default, formatted as
        line-based plain text.

    rosa pick LABEL [FILE]
        pick up the value(s) corresponding to the label, from
        input. by default, rosa returns only first body of
        all appearance.

    rosa scan [FILE]
        parse and print entire key-value data from input.

FORMATTING OPTIONS
    output formatting type. by default, output formatted as
    S-expression.

      -s
          format output as S-expression.
      -j
          format output as JSON.
      -y
          format output as YAML.

PICKING UP OPTIONS
    available with pick command.

      -a
          if supplied, all bodies are printed as formatting
          type.

      -n NUM
          specify number of bodies picking up from head.
          default, no supplied, NUM set as 1.

"))

(defun print-pretty (name obj)
  (cond ((eq name :|all|) (format t "~s" obj))
        (t (format t "~a" (first obj)))))

(defun main (&rest argv)
  (declare (ignorable argv))
  (case (length argv)
    (0 (usage)
       (metashell:exit -1))
    (1 (let ((name (intern (elt argv 0) :keyword)))
         (print-pretty name (pick-up name *standard-input*))))
    (2 (let ((name (intern (elt argv 0) :keyword))
             (file (elt argv 1)))
         (with-open-file (in file
                             :direction :input
                             :external-format
                             (inq:detect-external-format (pathname file) :jp))
           (print-pretty name (pick-up name in)))))
    (t (usage)
       (metashell:exit -1))))
;;; vim: set ft=lisp lisp:
