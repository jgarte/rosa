#!/bin/sh
#|-*- mode:lisp -*-|#
#| Rosa command line front-end
exec ros -Q -- $0 "$@"
|#
(defpackage :rosa.command
  (:use :cl))

(ql:quickload '(:cl-yaml
                :inquisitor
                :jonathan
                :rosa)
              :silent t)

(in-package :rosa.command)


(defun print-usage ()
  (format *error-output* "Rosa - text labeling language CLI
usage: rosa list [OPTIONS] [FILE]
       rosa pick [OPTIONS] LABEL [FILE]
       rosa scan [OPTIONS] [FILE]

DESCRIPTION
    rosa extract key-value structure from input. key as 'label'
    and value as 'body'.

    if not supplied `file`, rosa reads from standard input.

COMMANDS
    rosa list [FILE]
        list all labels from input. by default, formatted as
        line-based plain text.

    rosa pick LABEL [FILE]
        pick up the value(s) corresponding to the label, from
        input. by default, rosa returns only first body of
        all appearance.

    rosa scan [FILE]
        parse and print entire key-value data from input.

FORMATTING OPTIONS
    output formatting type. by default, output formatted as
    S-expression.

      -s
          format output as S-expression.
      -j
          format output as JSON.
      -y
          format output as YAML.

PICKING UP OPTIONS
    available with pick command.

      -a
          if supplied, all bodies are printed as formatting
          type.

      -n NUM
          specify number of bodies picking up from head.
          default, no supplied, NUM set as 1.

"))

(defun main (&rest argv)
  (if (< (length argv) 1)
      (progn
        (print-usage)
        (uiop:quit))
      (let ((command (intern (string-upcase (nth 0 argv)) :keyword)))
       (case command
         (:list (format t "list!~%~%"))
         (:pick (format t "picking up!~%~%"))
         (:scan (format t "scan!~%~%"))
         (t (format t "unknown command: ~s~%~%" (symbol-name command)))))))
;;; vim: set ft=lisp lisp:
